// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef __RcppSundials_RcppExports_h__
#define __RcppSundials_RcppExports_h__

#include <Rcpp.h>

namespace RcppSundials {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("RcppSundials", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("RcppSundials", "RcppSundials_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in RcppSundials");
            }
        }
    }

    inline NumericMatrix cvode_Cpp(NumericVector times, NumericVector states, NumericVector parameters, List forcings_data, List settings, SEXP model_) {
        typedef SEXP(*Ptr_cvode_Cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_cvode_Cpp p_cvode_Cpp = NULL;
        if (p_cvode_Cpp == NULL) {
            validateSignature("NumericMatrix(*cvode_Cpp)(NumericVector,NumericVector,NumericVector,List,List,SEXP)");
            p_cvode_Cpp = (Ptr_cvode_Cpp)R_GetCCallable("RcppSundials", "RcppSundials_cvode_Cpp");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_cvode_Cpp(Rcpp::wrap(times), Rcpp::wrap(states), Rcpp::wrap(parameters), Rcpp::wrap(forcings_data), Rcpp::wrap(settings), Rcpp::wrap(model_));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<NumericMatrix >(__result);
    }

    inline NumericMatrix cvode_R(NumericVector times, NumericVector states, NumericVector parameters, List forcings_data, List settings, Function model) {
        typedef SEXP(*Ptr_cvode_R)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_cvode_R p_cvode_R = NULL;
        if (p_cvode_R == NULL) {
            validateSignature("NumericMatrix(*cvode_R)(NumericVector,NumericVector,NumericVector,List,List,Function)");
            p_cvode_R = (Ptr_cvode_R)R_GetCCallable("RcppSundials", "RcppSundials_cvode_R");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_cvode_R(Rcpp::wrap(times), Rcpp::wrap(states), Rcpp::wrap(parameters), Rcpp::wrap(forcings_data), Rcpp::wrap(settings), Rcpp::wrap(model));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<NumericMatrix >(__result);
    }

}

#endif // __RcppSundials_RcppExports_h__
